// PostgreSQL (Supabase)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  name       String?
  role       Role      @default(VIEWER)
  district   District? @relation(fields: [districtId], references: [id])
  districtId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum Role {
  SUPER_ADMIN
  STATE_ADMIN
  DISTRICT_ADMIN
  EDITOR
  VIEWER
}

model District {
  id         Int        @id @default(autoincrement())
  slug       String     @unique
  name       String
  about      String?
  address    String?
  phone      String?
  email      String?
  website    String?
  officials  Official[]
  teams      Team[]
  results    Result[]
  users      User[]
  candidates Candidate[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Official {
  id         Int      @id @default(autoincrement())
  name       String
  position   String
  phone      String?
  email      String?
  photoUrl   String?
  districtId Int
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)
}

model Team {
  id         Int      @id @default(autoincrement())
  name       String
  category   String
  districtId Int
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)
}

model Result {
  id         Int       @id @default(autoincrement())
  level      String
  stage      String?
  matchNo    String?
  teamA      String
  teamB      String
  scoreA     Int?
  scoreB     Int?
  date       DateTime
  venue      String?
  districtId Int?
  district   District? @relation(fields: [districtId], references: [id])
  tags       String[]
  notes      String?
  published  Boolean   @default(true)
  createdAt  DateTime  @default(now())
}

model Notice {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  body        String
  category    String
  fileUrl     String?
  attachments String[]
  priority    String   @default("NORMAL")
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model StaticDoc {
  id        Int      @id @default(autoincrement())
  section   String
  title     String
  fileUrl   String
  createdAt DateTime @default(now())
}

model FormDef {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  title     String
  desc      String?
  schema    Json
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Submission {
  id        Int      @id @default(autoincrement())
  formKey   String
  data      Json
  createdAt DateTime @default(now())
}

model Election {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      ElectionStatus @default(UPCOMING)
  type        String   @default("GENERAL") // GENERAL, BY_ELECTION, SPECIAL
  published   Boolean  @default(true)
  documents   ElectionDocument[]
  candidates  Candidate[]
  votes       Vote[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ElectionDocument {
  id         Int      @id @default(autoincrement())
  title      String
  type       String   // NOTICE, SCHEDULE, FORM, RESULT
  fileUrl    String?
  content    String?
  electionId Int
  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Candidate {
  id         Int      @id @default(autoincrement())
  name       String
  position   String
  districtId Int?
  district   District? @relation(fields: [districtId], references: [id])
  electionId Int
  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade)
  votes      Vote[]
  bio        String?
  manifesto  String?
  photoUrl   String?
  status     CandidateStatus @default(ACTIVE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Vote {
  id         Int      @id @default(autoincrement())
  candidateId Int
  candidate  Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  electionId Int
  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade)
  voterId    String?  // User ID if authenticated voting
  voterEmail String?  // Email for anonymous voting
  ipAddress  String?
  createdAt  DateTime @default(now())
  
  @@unique([electionId, voterId])
  @@unique([electionId, voterEmail])
  @@unique([electionId, ipAddress])
}

enum ElectionStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum CandidateStatus {
  ACTIVE
  WITHDRAWN
  DISQUALIFIED
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  ip        String?
  createdAt DateTime @default(now())
}

